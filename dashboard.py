# Form implementation generated from reading ui file 'dashboard.ui'
#
# Created by: PyQt6 UI code generator 6.6.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtCore import Qt
from PyQt6.QtWidgets import QVBoxLayout, QHBoxLayout, QStackedWidget, QWidget, QTableWidget, QFrame, QPushButton, \
    QSizePolicy, QLabel, QSpacerItem, QHeaderView, QDialog, QFileDialog
from matplotlib.backends.backend_qtagg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure
import matplotlib.gridspec as gridspec
import create_METCM



df: ''
input_header = {}
input_table = {}
output_directory = ''

class FileManagerDialog(QDialog):
    def __init__(self):
        super().__init__()
        self.save_file_dialog()

    def save_file_dialog(self):
        global browsed_files, output_directory
        try:
            dialog = QFileDialog(self)
            dialog.setFileMode(QFileDialog.FileMode.AnyFile)  # Allow selecting any file type
            dialog.setAcceptMode(QFileDialog.AcceptMode.AcceptSave)  # Set to save mode
            dialog.setOption(QFileDialog.Option.ShowDirsOnly, True)  # Only show directories
            dialog.setNameFilter("Text files (*.txt)")  # Set filter to show only txt files
            if dialog.exec() == QDialog.DialogCode.Accepted:
                create_METCM.acceptance_flag = 0
                selected_directory = dialog.selectedFiles()[0]
                file_name = dialog.selectedNameFilter()  # Get the specified file name
                if selected_directory:
                    selected_file = selected_directory + '/' + file_name
                output_directory = selected_file.replace('/Text files (*.txt)', '')
            else:
                create_METCM.acceptance_flag = 1

        except UnboundLocalError:
            pass

class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.setGeometry(0, 0, 1200, 900)
        Dialog.setWindowIcon(QtGui.QIcon("Images/M.png"))
        Dialog.setWindowFlag(QtCore.Qt.WindowType.WindowMaximizeButtonHint, True)
        Dialog.setWindowFlag(QtCore.Qt.WindowType.WindowMinimizeButtonHint, True)
        # Layout for the main window
        main_layout = QVBoxLayout(Dialog)
        button_layout = QHBoxLayout()
        # Create a stacked widget to switch between table and graph
        self.stacked_widget = QStackedWidget()

        # Table Widget Page
        self.table_page = QWidget()
        table_layout = QVBoxLayout(self.table_page)
        self.tableWidget = QTableWidget(parent=self.table_page)
        table_layout.addWidget(self.tableWidget)
        self.stacked_widget.addWidget(self.table_page)
        self.tableWidget.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeMode.Stretch)
        # Graph Page
        self.graph_page = QWidget()
        graph_layout = QVBoxLayout(self.graph_page)
        self.frame = QFrame(parent=self.graph_page)
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.Panel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Sunken)
        graph_layout.addWidget(self.frame)
        self.stacked_widget.addWidget(self.graph_page)

        self.label = QtWidgets.QLabel()
        self.label.setFixedSize(400, 20)
        self.label.setText("Global Forecast System Data Table - Vertical Weather Profile")
        self.label.setScaledContents(True)
        self.label.setObjectName("label")


        # Button Box
        self.buttonBox = QtWidgets.QDialogButtonBox(parent=Dialog)
        self.buttonBox.setStandardButtons(
            QtWidgets.QDialogButtonBox.StandardButton.Cancel | QtWidgets.QDialogButtonBox.StandardButton.Ok)
        self.buttonBox.button(QtWidgets.QDialogButtonBox.StandardButton.Ok).setText("Generate METCM")
        self.buttonBox.button(QtWidgets.QDialogButtonBox.StandardButton.Cancel).setText("Close")

        ok_button = self.buttonBox.button(QtWidgets.QDialogButtonBox.StandardButton.Ok)
        ok_button.setMinimumSize(150, 50)  # Adjust the size as needed
        ok_button.setMaximumSize(150, 50)  # Adjust the size as needed
        ok_button.clicked.connect(self.generate_METCM)

        cancel_button = self.buttonBox.button(QtWidgets.QDialogButtonBox.StandardButton.Cancel)
        cancel_button.setMinimumSize(150, 50)  # Adjust the size as needed
        cancel_button.setMaximumSize(150, 50)  # Adjust the size as needed

        # Add navigation buttons
        self.prev_button = QPushButton("<", parent=Dialog)
        self.next_button = QPushButton(">", parent=Dialog)
        self.prev_button.setFixedSize(70, 50)
        self.next_button.setFixedSize(70, 50)


        button_layout.addWidget(self.prev_button)
        button_layout.addWidget(self.label)
        button_layout.addWidget(self.next_button)
        main_layout.addLayout(button_layout)
        main_layout.addWidget(self.stacked_widget)
        main_layout.addWidget(self.buttonBox)

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

        # Set up table widget
        self.setup_table(df)

        # Set up graph
        self.setup_graph(df)

        # Connect page change signals to slots
        self.prev_button.clicked.connect(self.prev_page)
        self.next_button.clicked.connect(self.next_page)

        self.label_list = ["Global Forecast System Data Table - Vertical Weather Profile", "Vertical Weather Profile Data Parameters vs Height Graphs"]


    def generate_METCM(self):
        global input_table, input_header
        FileManagerDialog()
        create_METCM.create_message(input_header, input_table, output_directory)

    def prev_page(self):
        current_index = self.stacked_widget.currentIndex()
        new_index = (current_index - 1) % self.stacked_widget.count()
        self.stacked_widget.setCurrentIndex(new_index)
        self.stacked_widget.repaint()
        self.label.setText(self.label_list[new_index])

    def next_page(self):
        current_index = self.stacked_widget.currentIndex()
        new_index = (current_index + 1) % self.stacked_widget.count()
        self.stacked_widget.setCurrentIndex(new_index)
        self.stacked_widget.repaint()
        self.label.setText(self.label_list[new_index])

    def setup_table(self, df):
        # Set the number of rows and columns in the QTableWidget
        self.tableWidget.setRowCount(df.shape[0])
        self.tableWidget.setColumnCount(df.shape[1])

        # Set the headers
        self.tableWidget.setHorizontalHeaderLabels(df.columns)

        # Iterate over the DataFrame and set the data in the QTableWidget
        for i in range(df.shape[0]):
            for j in range(df.shape[1]):
                item = QtWidgets.QTableWidgetItem(str(df.iloc[i, j]))
                self.tableWidget.setItem(i, j, item)

    def setup_graph(self, df):
        # Create a Matplotlib figure and canvas
        self.figure = Figure(figsize=(12, 8), dpi=100)  # Larger figure size for better visibility
        self.canvas = FigureCanvas(self.figure)
        layout = QVBoxLayout(self.frame)
        layout.addWidget(self.canvas)

        # Plot the graph
        self.plot(df)

    def plot(self, df):
        # Filter columns to plot (excluding specified columns)
        columns_to_plot = [col for col in df.columns if col not in ['HeightMSL', 'Lat', 'Lon', 'Elapsed time', 'Pm', 'HeightE']]

        num_plots = len(columns_to_plot)
        gs = gridspec.GridSpec(2, 3)  # Define a 2x4 grid for 2 horizontal and 4 vertical plots

        for i, column in enumerate(columns_to_plot):
            row = i // 3  # Determine row index
            col = i % 3   # Determine column index
            ax = self.figure.add_subplot(gs[row, col])  # Specify the grid location for each subplot
            ax.plot(df[column], df['HeightMSL'], label=column)
            ax.set_xlabel(column)
            ax.set_ylabel('HeightMSL')
            ax.set_title(f"{column} vs. HeightMSL")  # Add title to each subplot


        gs.tight_layout(self.figure, h_pad=2.0, w_pad=2.0)
        self.figure.subplots_adjust(hspace=0.5, wspace=0.3)# Adjust layout with equal padding
        self.canvas.draw()

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Vertical Weather Profile"))

def open_dialog():
    Dialog = QtWidgets.QDialog()
    Dialog.setStyle(QtWidgets.QStyleFactory.create("Windows Vista"))
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    Dialog.exec()

